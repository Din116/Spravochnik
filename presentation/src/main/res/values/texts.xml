<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="assembler_title">Assembler</string>
    <string name="assembler_text"><![CDATA[<p>Язык ассемблера (англ. assembly language) —
машинно-ориентированный язык программирования низкого уровня. Его команды прямо
соответствуют отдельным командам машины или их последовательностям, также он
может предоставлять дополнительные возможности облегчения программирования,
такие как макрокоманды, выражения, средства обеспечения модульности программ.
Может рассматриваться как автокод (см. ниже), расширенный конструкциями языков
программирования высокого уровня. Является существенно платформо-зависимым. Языки
ассемблера для различных аппаратных платформ несовместимы, хотя могут быть в
целом подобны. </p>

<p>В русском языке может именоваться просто «ассемблером»
(типичны выражения типа «писать программу на ассемблере»), что, строго говоря,
неверно, так как ассемблером именуется утилита трансляции программы с языка
ассемблера в объектный код компьютера. Автокод — язык программирования,
предложения которого по своей структуре в основном подобны командам и
обрабатываемым данным конкретного машинного языка.</p>

<p>Общее определение</p>

<p>Язык ассемблера — система обозначений, используемая для
представления в удобочитаемой форме программ, записанных в машинном коде. Язык
ассемблера позволяет программисту пользоваться алфавитными мнемоническими
кодами операций, по своему усмотрению присваивать символические имена регистрам
ЭВМ и памяти, а также задавать удобные для себя схемы адресации (например,
индексную или косвенную). Кроме того, он позволяет использовать различные
системы счисления (например, десятичную или шестнадцатеричную) для
представления числовых констант и даёт возможность помечать строки программы
метками с символическими именами с тем, чтобы к ним можно было обращаться (по
именам, а не по адресам) из других частей программы (например, для передачи
управления). </p>

<p>Перевод программы на языке ассемблера в исполнимый машинный
код (вычисление выражений, раскрытие макрокоманд, замена мнемоник собственно
машинными кодами и символьных адресов на абсолютные или относительные адреса)
производится ассемблером (программой-транслятором), которая и дала языку
ассемблера его название.</p>

<p>Содержание языка</p>

<p>Команды языка ассемблера один к одному соответствуют
командам процессора. Фактически, они и представляют собой более удобную для
человека символьную форму записи — мнемокоды — команд и их аргументов. При этом
одной команде языка ассемблера может соответствовать несколько вариантов команд
процессора.</p>

<p>Кроме того, язык ассемблера позволяет использовать
символические метки вместо адресов ячеек памяти, которые при ассемблировании
заменяются на вычисляемые ассемблером или компоновщиком абсолютные, или
относительные адреса, а также так называемые директивы (команды ассемблера, не
переводимые в машинные команды процессора, а выполняемые самим ассемблером).</p>

<p>Директивы ассемблера позволяют, в частности, включать блоки
данных, задать ассемблирование фрагмента программы по условию, задать значения
меток, использовать макрокоманды с параметрами. </p>

<p>Каждая модель (или семейство) процессоров имеет свой набор —
систему — команд и соответствующий ему язык ассемблера. Наиболее популярные
синтаксисы языков ассемблера — Intel-синтаксис и AT&amp;T-синтаксис. Существуют
компьютеры, реализующие в качестве машинного язык программирования высокого
уровня (Форт, Лисп, Эль-76).  Фактически, в таких компьютерах они выполняют
роль языков ассемблера.</p>]]></string>
    <string name="java_title">Java</string>
    <string name="java_text"><![CDATA[<p><span>Java</span> сильно типизированный
объектно-ориентированный язык программирования, разработанный компанией <span>Sun</span><span> </span><span>Microsystems</span>
(в последующем приобретённой компанией <span>Oracle</span>).
Приложения <span>Java</span> обычно транслируются в специальный
байт-код, поэтому они могут работать на любой компьютерной архитектуре, с
помощью виртуальной <span>Java</span>-машины. Дата официального
выпуска — 23 мая 1995 года.</p>

<p>Изначально язык назывался <span>Oak</span>
(«Дуб»), разрабатывался Джеймсом Гослингом для программирования бытовых
электронных устройств. Впоследствии он был переименован в <span>Java</span>
и стал использоваться для написания клиентских приложений и серверного программного
обеспечения. Назван в честь марки кофе <span>Java</span>, которая, в
свою очередь, получила наименование одноимённого острова (Ява), поэтому на
официальной эмблеме языка изображена чашка с горячим кофе. Существует и другая
версия происхождения названия языка, связанная с аллюзией на кофе-машину как,
пример бытового устройства, для программирования которого изначально язык
создавался. В соответствии с этимологией в русскоязычной литературе с конца
двадцатого и до первых лет двадцать первого века название языка нередко
переводилось как Ява, а не транскрибировалось, как это стало общепринятым
позднее.</p>

<p>Программы на <span>Java</span> транслируются в
байт-код <span>Java</span>, выполняемый виртуальной машиной <span>Java</span> (<span>JVM</span>) — программой,
обрабатывающей байтовый код и передающей инструкции оборудованию как
интерпретатор. Достоинством подобного способа выполнения программ является
полная независимость байт-кода от операционной системы и оборудования, что
позволяет выполнять <span>Java</span>-приложения на любом
устройстве, для которого существует соответствующая виртуальная машина. Другой
важной особенностью технологии <span>Java</span> является гибкая
система безопасности, в рамках которой исполнение программы полностью
контролируется виртуальной машиной. Любые операции, которые превышают
установленные полномочия программы (например, попытка несанкционированного
доступа к данным или соединения с другим компьютером), вызывают немедленное
прерывание.</p>

<p>Часто к недостаткам концепции виртуальной машины относят
снижение производительности. Ряд усовершенствований несколько увеличил скорость
выполнения программ на <span>Java</span>:применение технологии
трансляции байт-кода в машинный код непосредственно во время работы программы (<span>JIT</span>-технология) с возможностью сохранения версий класса в
машинном коде, широкое использование платформенно-ориентированного кода (<span>native</span>-код) в стандартных библиотеках, аппаратные средства,
обеспечивающие ускоренную обработку байт-кода (например, технология <span>Jazelle</span>, поддерживаемая некоторыми процессорами архитектуры <span>ARM</span>).</p>

<p>По данным сайта <span>shootout</span>.<span>alioth</span>.<span>debian</span>.<span>org</span>,
для семи разных задач время выполнения на <span>Java</span>
составляет в среднем в полтора-два раза больше, чем для <span>C</span>/<span>C</span>++, в некоторых случаях <span>Java</span>
быстрее, а в отдельных случаях в 7 раз медленнее. С другой стороны, для большинства
из них потребление памяти <span>Java</span>-машиной было в 10—30 раз
больше, чем программой на <span>C</span>/<span>C</span>++.
Также примечательно исследование, проведённое компанией <span>Google</span>,
согласно которому отмечается существенно более низкая производительность и
бо?льшее потребление памяти в тестовых примерах на <span>Java</span>
в сравнении с аналогичными программами на <span>C</span>++.</p>

<p>Идеи, заложенные в концепцию и различные реализации среды
виртуальной машины <span>Java</span>, вдохновили множество
энтузиастов на расширение перечня языков, которые могли бы быть использованы
для создания программ, исполняемых на виртуальной машине. Эти идеи нашли также
выражение в спецификации общеязыковой инфраструктуры <span>CLI</span>,
заложенной в основу платформы .<span>NET</span> компанией <span>Microsoft</span>.</p>]]></string>
    <string name="csharp_title">C#</string>
    <string name="dart_title">Dart</string>
    <string name="delphi_title">Delphi</string>
    <string name="go_title">Go</string>
    <string name="javascript_title">JavaScript</string>
    <string name="matlab_title">MatLab</string>
    <string name="objectivec_title">Objective-C</string>
    <string name="perl_title">Perl</string>
    <string name="php_title">PHP</string>
    <string name="plsql_title">PLSQL</string>
    <string name="python_title">Python</string>
    <string name="r_title">R</string>
    <string name="ruby_title">Ruby</string>
    <string name="swift_title">swift</string>
    <string name="dotnet_title">.NET</string>
    <string name="visualbasic_title">Visual Basic</string>
    <string name="cplusplus_title">C++</string>
    <string name="c_title">C</string>
</resources>